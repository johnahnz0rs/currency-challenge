{"version":3,"sources":["components/Calculate.js","App.js","serviceWorker.js","index.js"],"names":["Calculate","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startDateHandler","e","newDate","target","value","setState","startDate","makeBudget","numberOfDaysHandler","newNOD","numberOfDays","state","sd","split","join","axios","post","then","data","cost","totalCost","catch","err","console","log","bind","assertThisInitialized","today","moment","format","react_default","a","createElement","className","type","name","onChange","min","max","totalCostMang","start","style","border","borderRadius","maxWidth","htmlFor","Component","App","components_Calculate","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbbb55e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as moment from 'moment';\nimport axios from 'axios';\n\nclass Calculate extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            startDate: null,\n            numberOfDays: 1,\n            totalCost: null,\n        };\n        // bind methods here\n        this.startDateHandler = this.startDateHandler.bind(this);\n        this.numberOfDaysHandler = this.numberOfDaysHandler.bind(this);\n        this.makeBudget = this.makeBudget.bind(this);\n    }\n\n    componentDidMount() {\n        // set today's date as default startDate, then run makeBudget\n        const today = moment().format('YYYY-MM-DD');\n        this.setState({startDate: today}, this.makeBudget);\n    }\n\n    // handles changes to startDate\n    startDateHandler = (e) => {\n        const newDate = e.target.value;\n        this.setState({startDate: newDate}, this.makeBudget);\n    };\n\n    // handles changes from numberOfDays\n    numberOfDaysHandler = (e) => {\n        const newNOD = e.target.value;\n        if (newNOD < 60000) {\n            this.setState({numberOfDays: newNOD}, this.makeBudget);\n        }\n\n    };\n\n    makeBudget = () => {\n        if (this.state.startDate && this.state.numberOfDays) {\n\n            // format your post data\n            const sd = this.state.startDate.split('-');\n            const startDate = [sd[1], sd[2], sd[0]].join('/');\n            const numberOfDays = this.state.numberOfDays;\n\n            axios.post('/api/budget', {startDate: startDate, numberOfDays: numberOfDays})\n                .then(data => {\n                    const cost = data.data.totalCost;\n                    this.setState({totalCost: cost});\n                })\n                .catch(err => console.log('*** err in makeBudget post request ***', err));\n        }\n\n\n    };\n\n    render() {\n\n        // startDate\n        // default = today\n        let startDate = null;\n        if (this.state.startDate) {\n            startDate = <input className=\"form-control\" type=\"date\" name=\"start-date\" value={this.state.startDate} onChange={this.startDateHandler} />;\n        }\n\n        // numberOfDays\n        // default = 1\n        let numberOfDays = <input className=\"form-control\" type=\"number\" name=\"number-of-days\" value={this.state.numberOfDays} onChange={this.numberOfDaysHandler} min=\"1\" max=\"60000\" />;\n\n\n        // totalCost\n        let totalCostMang = null;\n        let costDiv = {\n            border: '1px solid black',\n            borderRadius: '8px',\n            maxWidth: '380px',\n        };\n        if (this.state.startDate && this.state.numberOfDays && this.state.totalCost) {\n\n            const start = this.state.startDate.split('-');\n            const startDate = start[1] + '/' + start[2] + '/' + start[0];\n\n            totalCostMang =\n            <div className=\"my-5 mx-auto py-5\" style={costDiv}>\n                <h4><u>Total Cost</u></h4>\n                <span>for {this.state.numberOfDays} day(s), starting on {startDate}</span><br/>\n                <h4><i>${this.state.totalCost}</i></h4>\n            </div>;\n        }\n\n        return(\n\n            <div className=\"text-center\">\n                <h1 className=\"m-4\">Bob's Banana Budget</h1>\n\n                {/* inputs x 2 */}\n                <div className=\"m-4\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"start-date\">Enter Start Date</label>\n                        {startDate}\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"mb-0\" htmlFor=\"number-of-days\">How many days do you want to budget?</label><br/>\n                        {numberOfDays}\n                    </div>\n                </div>\n\n                {/* output */}\n                {totalCostMang}\n            </div>\n\n        );\n    }\n\n}\n\nexport default Calculate;","import React, { Component } from 'react';\nimport './App.css';\nimport Calculate from './components/Calculate';\n\nclass App extends Component {\n\n    componentDidMount() { console.log('*** hello, world. johnahnz0rs is l33t ***'); }\n\n    render() {\n        return (\n            <Calculate />\n        );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}